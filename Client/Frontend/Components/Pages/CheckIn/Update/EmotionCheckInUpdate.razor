@page "/CheckIn/EmotionCheckInUpdate/{id:int}/{Emotion}"
@using DTO
@using Frontend.Services.Interfaces
@inject NavigationManager NavigationManager
@inject IEmotionCheckInService EmotionCheckInService
@inject IEmotionsService EmotionsService
@inject IUserTagsService UserTagsService

<h3 style="text-align: center;">Update Emotion Check-In</h3>

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
  <div class="col-md-5">
    <div class="card @CardClass">
      <div class="card-header">
        <h1>
          I feel @Emotion
        </h1>
      </div>
      <div class="card-body @CardBodyClass">
        <h5 class="card-title">Future fields</h5>
        <p class="card-text">Description</p>
        <a class="btn @ButtonClass" @onclick='Submit'>CheckIn Emotion</a>
      </div>
    </div>
  </div>
</div>

@code {
  public required string CardClass { get; set; }
  public required string CardBodyClass { get; set; }
  public required string ButtonClass { get; set; }
  [Parameter] public required int Id { get; set; }
  [Parameter] public required string Emotion { get; set; }
  private EmotionCheckInDto? emotionCheckIn;

  protected override async Task OnInitializedAsync()
  {
    emotionCheckIn = await EmotionCheckInService.Get(Id);

    var emotions = await EmotionsService.GetAll(Emotion, null);
    var color = emotions.First().Color.ToLower();

    CardClass = GetCardClass(color);
    CardBodyClass = GetCardBodyClass(color);
    ButtonClass = GetButtonClass(color);
  }

  private async Task Submit()
  {
    if (emotionCheckIn != null)
    {
      var existingTags = await UserTagsService.GetAll();
      
      emotionCheckIn.Emotion = Emotion;
      await EmotionCheckInService.Update(Id, new EmotionCheckInUpdateDto
      {
        Id = emotionCheckIn.Id.Value,
        Emotion = emotionCheckIn.Emotion,
        Tags = existingTags
      });
      NavigationManager.NavigateTo("/CheckIn");
    }
  }

  private string GetCardClass(string color)
  {
    return color.ToLower() switch
    {
      "red" => "bg-danger text-white",
      "yellow" => "bg-warning text-dark",
      "blue" => "bg-primary text-white",
      "green" => "bg-success text-white",
      _ => ""
    };
  }

  private string GetCardBodyClass(string color)
  {
    return color.ToLower() switch
    {
      "red" => "bg-light text-dark",
      "yellow" => "bg-light text-dark",
      "blue" => "bg-light text-dark",
      "green" => "bg-light text-dark",
      _ => "bg-light text-dark"
    };
  }

  private string GetButtonClass(string color)
  {
    return color.ToLower() switch
    {
      "red" => "btn-outline-danger",
      "yellow" => "btn-outline-warning",
      "blue" => "btn-outline-primary",
      "green" => "btn-outline-success",
      _ => "btn-outline-secondary"
    };
  }

}