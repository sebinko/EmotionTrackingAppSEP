@page "/CheckIn/Edit/{id:int}"
@using API.DTO
@using Frontend.Services
@using Frontend.Services.Interfaces
@inject NavigationManager NavigationManager
@inject IEmotionCheckInService EmotionCheckInService

<AuthorizeView>
  <Authorized>
    <h3>Edit Emotion</h3>
    <p1>Description</p1>
    <input type="text" class="form-control" id="description" @bind="Description"><br/>
    <button class="btn btn-success" @onclick="Save">Save</button><br/><hr/>
    <button class="btn btn-danger" @onclick="NavigateToDeletePage">Delete</button>
    <button class="btn btn-primary" @onclick="NavigateToPickColorUpdatePage">Edit Emotion</button>
    <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
  </Authorized>
</AuthorizeView>

@code {
  [Parameter] public int Id { get; set; }
  private EmotionCheckInDTO? emotionCheckIn;
  public string? Description { get; set; }

  protected override async Task OnInitializedAsync()
  {
    emotionCheckIn = await EmotionCheckInService.Get(Id);
    Description = emotionCheckIn?.Description;
  }
  
  private async Task Save()
  {
    emotionCheckIn.Description = Description;
    
    await EmotionCheckInService.Update(Id, new EmotionCheckInUpdateDTO
    {
      Description = emotionCheckIn.Description,
      Emotion = emotionCheckIn.Emotion,
      id = emotionCheckIn.Id.Value,
      Tags = new List<string>()
    });
    
    NavigationManager.NavigateTo("CheckIn");
  }
  
  private void NavigateToPickColorUpdatePage()
  {
    NavigationManager.NavigateTo($"/CheckIn/PickColorUpdate/{Id}");
  }

  private void NavigateToDeletePage()
  {
    NavigationManager.NavigateTo($"/CheckIn/Delete/{Id}");
  }

  private void CancelEdit()
  {
    NavigationManager.NavigateTo("/CheckIn");
  }
}