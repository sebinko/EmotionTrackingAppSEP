@page "/Friends"
@using System.Security.Claims
@using DTO
@using Frontend.Services.Interfaces
@using Frontend.Components.Shared
@using Frontend.Utils
@using Humanizer
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserFriendsService UserFriendsService
@inject IReactionService ReactionService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<h3>All Friends</h3>

<div class="container">
  <div class="row mb-3">
    <div class="col-12">
      <div class="card">
        <div class="card-body">
          <form @onsubmit="AddFriend">
            <div class="form-group">
              <label for="username">Username</label>
              <input type="text" class="form-control" id="username" @bind="newFriendUsername"
                     required/>
            </div>
            <button type="submit" class="btn btn-primary mt-2">Add Friend</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    @foreach (var friend in userFriends)
    {
      <div class="col-12 mb-3">
        <div class="card">
          <div class="card-body">
            <div class="row">
              <div class="col-md-6">
                <h5 class="card-title">@friend.User.Username</h5>
                @if (friend.LatestCheckIn == null)
                {
                  <p class="card-text">No check-ins yet</p>
                }
                else
                {
                  <p class="card-text">@friend.LatestCheckIn.Emotion</p>
                  <p
                    class="card-text">@DateTime.Parse(friend.LatestCheckIn.UpdatedAt).Humanize()</p>
                }
              </div>
              <div class="col-md-6">
                @if (!reactions.Any(r => r.EmotionCheckInId == friend.LatestCheckIn?.Id && r.UserId == userId))
                {
                  <button class="btn btn-outline-primary"
                          @onclick='() => ReactToFriend("üëç", friend.LatestCheckIn.Id.Value)'>üëç
                  </button>
                  <button class="btn btn-outline-secondary"
                          @onclick='() => ReactToFriend("üëé", friend.LatestCheckIn.Id.Value)'>üëé
                  </button>
                  <button class="btn btn-outline-danger"
                          @onclick='() => ReactToFriend("‚ù§Ô∏è", friend.LatestCheckIn.Id.Value)'>‚ù§Ô∏è
                  </button>
                }

                else
                {
                <p class="card-text">Your reaction: @reactions.Where(r => r.EmotionCheckInId == friend.LatestCheckIn.Id && r.UserId == userId).First().Emoji</p>
                <button class="btn btn-danger"
                @onclick="() => RemoveReaction(friend.LatestCheckIn.Id.Value)">Remove Reaction
                </button>
                }
              </div>
            </div>
            <button class="btn btn-danger mt-2" @onclick="() => RemoveFriend(friend.User.Username)">
              Remove
            </button>
          </div>
        </div>
      </div>
    }
  </div>
</div>

<YesNoPopup Title="Confirm" Message="@yesNoMessage" OnYes="AddFriendConfirm"/>
<YesNoPopup Title="Confirm" ModalId="confirmRemove" Message="@yesNoMessage"
            OnYes="() => RemoveFriendConfirm()"/>
<OkPopup Title="Success" Message="@okMessage"/>

@code {
  private List<UserWithLatestCheckIn> userFriends = new List<UserWithLatestCheckIn>();
  private List<ReactionDto> reactions = new List<ReactionDto>();
  private string newFriendUsername;
  private string okMessage;
  private string yesNoMessage;
  private string userToRemove;
  private AuthenticationState? state;
  private int? userId;

  protected override async Task OnInitializedAsync()
  {
    userFriends = await UserFriendsService.GetFriends();
    state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    userId = int.Parse(state.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);

    await RecalculateReactions();
  }

  private async Task RecalculateReactions()
  {
    reactions = new List<ReactionDto>();
    
    foreach (var friend in userFriends)
    {
      var reaction = await ReactionService.GetByReactionsByEmotionCheckIn(friend.LatestCheckIn.Id.Value);

      if (reaction.Where(r => r.UserId == userId).Any())
      {
        reactions.Add(reaction.Where(r => r.UserId == userId).FirstOrDefault());
      }
    }
  }

  private async Task AddFriend()
  {
    yesNoMessage = $"Are you sure you want to add {newFriendUsername} as friend?";
    await JSRuntime.InvokeVoidAsync("modalHelper.showModal", "yesNoModal");
  }

  private async Task AddFriendConfirm()
  {
    try
    {
      await UserFriendsService.CreateFriendship(newFriendUsername);
    }
    catch (Exception e)
    {
      okMessage = e.Message;
      await JSRuntime.InvokeVoidAsync("modalHelper.hideModal", "yesNoModal");
      await JSRuntime.InvokeVoidAsync("modalHelper.showModal", "okModal");
      await InvokeAsync(StateHasChanged);
      return;
    }

    userFriends = await UserFriendsService.GetFriends();
    okMessage = "Friend added successfully!";
    await JSRuntime.InvokeVoidAsync("modalHelper.hideModal", "yesNoModal");
    await JSRuntime.InvokeVoidAsync("modalHelper.showModal", "okModal");
    await InvokeAsync(StateHasChanged);


    newFriendUsername = "";
  }

  private async Task RemoveFriend(string username)
  {
    yesNoMessage = $"Are you sure you want to remove {username} as friend?";
    await JSRuntime.InvokeVoidAsync("modalHelper.showModal", "confirmRemove");
    userToRemove = username;
  }

  private async Task RemoveFriendConfirm()
  {
    await UserFriendsService.RemoveFriendship(userToRemove);
    userFriends = await UserFriendsService.GetFriends();
    okMessage = "Friend removed successfully!";
    await JSRuntime.InvokeVoidAsync("modalHelper.hideModal", "confirmRemove");
    await JSRuntime.InvokeVoidAsync("modalHelper.showModal", "okModal");
    userToRemove = "";
  }

  private async Task ReactToFriend(string reaction, int checkInId)
  {
    ReactionService.Create(new ReactionCreateDto()
    {
      Emoji = reaction,
      EmotionCheckInId = checkInId
    });
    await RecalculateReactions();
    await InvokeAsync(StateHasChanged);
  }

  private async Task RemoveReaction(int checkInId)
  {
    ReactionService.Delete(new ReactionDeleteDto()
    {
      EmotionCheckInId = checkInId
    });
    await RecalculateReactions();
    await InvokeAsync(StateHasChanged);
  }
}